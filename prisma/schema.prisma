// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  portfolios Portfolio[]
  watchlists Watchlist[]
  alerts     Alert[]

  @@map("users")
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("portfolios")
}

model Transaction {
  id          String          @id @default(cuid())
  symbol      String
  type        TransactionType
  quantity    Float
  price       Float
  fees        Float           @default(0)
  date        DateTime
  portfolioId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  stocks WatchlistStock[]

  @@map("watchlists")
}

model WatchlistStock {
  id          String @id @default(cuid())
  symbol      String
  watchlistId String

  // Relations
  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@unique([symbol, watchlistId])
  @@map("watchlist_stocks")
}

model Alert {
  id          String    @id @default(cuid())
  symbol      String
  type        AlertType
  value       Float
  isActive    Boolean   @default(true)
  triggered   Boolean   @default(false)
  triggeredAt DateTime?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

enum TransactionType {
  BUY
  SELL
}

enum AlertType {
  PRICE_ABOVE
  PRICE_BELOW
  PERCENT_CHANGE_UP
  PERCENT_CHANGE_DOWN
  VOLUME_SPIKE
}
